name: Build TWRP Recovery

on:
  workflow_dispatch:
    inputs:
      MANIFEST_BRANCH:
        description: 'TWRP Manifest Branch'
        required: true
        default: 'twrp-8.1'
        type: choice
        options:
          - twrp-8.1
      DEVICE_TREE:
        description: 'Custom Recovery Tree'
        required: true
        default: 'https://github.com/FusinX/android_device_lenovo_brady.git'
      DEVICE_TREE_BRANCH:
        description: 'Custom Recovery Tree Branch'
        required: true
        default: 'twrp-8.0'
      BUILD_TARGET:
        description: 'Specify your Build Target'
        required: true
        default: 'recovery'
        type: choice
        options:
          - boot
          - recovery
          - vendorboot
      LDCHECK:
        description: 'Use LDCHECK'
        required: false
        default: 'false'
        type: boolean
      LDCHECKPATH:
        description: 'Path of blobs to check'
        required: true
        default: 'system/bin/qseecomd'
      RELEASE_TAG:
        description: 'Release Tag'
        required: true
        default: 'twrp-8.1-brady'
      RELEASE_NAME:
        description: 'Release Name'
        required: true
        default: 'TWRP 8.1 for Brady'

jobs:
  build:
    name: Build by ${{ github.actor }}
    runs-on: ubuntu-20.04
    permissions:
      contents: write

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      WORK_DIR: /mnt/workspace
      USE_CCACHE: 1
      CCACHE_DIR: /mnt/workspace/.ccache

    steps:
    - name: Show Disk & RAM
      run: |
        df -h
        free -h

    - name: Prepare Workspace
      run: |
        sudo mkdir -p $WORK_DIR
        sudo chown $USER:$USER $WORK_DIR

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bc bison build-essential ccache curl flex \
          g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev \
          lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev \
          libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool \
          squashfs-tools xsltproc zip zlib1g-dev python-is-python2 python3 python3-pip

    - name: Setup Java 8
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '8'

    - name: Install Repo Tool
      run: |
        mkdir -p ~/bin
        curl -fsSL https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod +x ~/bin/repo
        echo "$HOME/bin" >> $GITHUB_PATH

    - name: Initialize TWRP Source
      run: |
        cd $WORK_DIR
        repo init --depth=1 -u https://github.com/minimal-manifest-twrp/platform_manifest_twrp_omni.git -b ${{ inputs.MANIFEST_BRANCH }}

    - name: Sync Source
      run: |
        cd $WORK_DIR
        repo sync -c -j2 --force-sync --no-tags --no-clone-bundle

    - name: Clone Device Tree
      run: |
        cd $WORK_DIR
        git clone "${{ inputs.DEVICE_TREE }}" -b "${{ inputs.DEVICE_TREE_BRANCH }}" device/lenovo/brady

    - name: Set Build Target
      run: |
        case "${{ inputs.BUILD_TARGET }}" in
          recovery) echo "BUILD_TARGET_NAME=recovery" >> $GITHUB_ENV ;;
          boot) echo "BUILD_TARGET_NAME=boot" >> $GITHUB_ENV ;;
          vendorboot) echo "BUILD_TARGET_NAME=vendor_boot" >> $GITHUB_ENV ;;
        esac

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-twrp-ccache
        max-size: 2G

    - name: Build TWRP with Optimized Threads
      run: |
        cd $WORK_DIR
        export ALLOW_MISSING_DEPENDENCIES=true
        export CCACHE_EXEC=$(which ccache)
        export PATH="/usr/lib/ccache:$PATH"
        ccache -M 2G
        source build/envsetup.sh

        echo "Available lunch combos:"
        lunch || true

        # Try to detect the correct lunch combo dynamically
        COMBO=$(grep -r "add_lunch_combo" device/lenovo/brady 2>/dev/null | grep -o 'omni_[^"]*' | head -n 1)
        if [ -z "$COMBO" ]; then
          COMBO="omni_brady-eng"
        fi

        echo "Using lunch combo: $COMBO"
        lunch $COMBO

        make clean
        make -j2 $BUILD_TARGET_NAME showcommands

    - name: Check for Output Image
      run: |
        echo "Checking output in $WORK_DIR/out/target/product/brady"
        ls -lh $WORK_DIR/out/target/product/brady
        OUT_IMAGE="$WORK_DIR/out/target/product/brady/${{ env.BUILD_TARGET_NAME }}.img"
        if [ ! -f "$OUT_IMAGE" ]; then
          echo "::error::Build failed: Output image not found at $OUT_IMAGE"
          echo "Searching for any .img files..."
          find $WORK_DIR/out/target/product/brady -name "*.img"
          exit 1
        fi

    - name: Clone LDCheck tool
      if: inputs.LDCHECK == true
      run: |
        git clone https://github.com/LineageOS/android_build.git $WORK_DIR/temp_ldcheck
        cp $WORK_DIR/temp_ldcheck/tools/ldcheck.py $WORK_DIR/ldcheck.py

    - name: Run LDCheck (optional)
      if: inputs.LDCHECK == true
      run: |
        ROOT_DIR="$WORK_DIR/out/target/product/brady/recovery/root"
        if [ -d "$ROOT_DIR" ]; then
          cd "$ROOT_DIR"
          python3 $WORK_DIR/ldcheck.py -p system/lib64:vendor/lib64:system/lib:vendor/lib -d "${{ inputs.LDCHECKPATH }}"
        else
          echo "LDCheck skipped: root directory not found."
        fi
      continue-on-error: true

    - name: Upload Recovery Image
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: TWRP-${{ inputs.BUILD_TARGET }}
        path: ${{ env.WORK_DIR }}/out/target/product/brady/${{ env.BUILD_TARGET_NAME }}.img

    - name: Create GitHub Release
      if: success()
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ inputs.RELEASE_TAG }}
        name: ${{ inputs.RELEASE_NAME }}
        files: ${{ env.WORK_DIR }}/out/target/product/brady/${{ env.BUILD_TARGET_NAME }}.img

    - name: Final Disk Check
      run: |
        echo "Disk Usage at end:"
        df -h
        du -sh $WORK_DIR || true

    - name: Cleanup
      if: always()
      run: |
        sudo rm -rf $WORK_DIR/temp_ldcheck
        sudo rm -rf $WORK_DIR/.repo
        sudo rm -rf $WORK_DIR/.ccache
        sudo rm -rf $WORK_DIR/out